<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Tomial's Blog</title><link>https://tomial.github.io/tags/java/</link><description>Recent content in Java on Tomial's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© Tomial</copyright><lastBuildDate>Fri, 10 Apr 2020 17:49:32 +0000</lastBuildDate><atom:link href="https://tomial.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>为什么Arrays.asList()返回的列表不能增加元素</title><link>https://tomial.github.io/posts/%E4%B8%BA%E4%BB%80%E4%B9%88arrays.aslist%E8%BF%94%E5%9B%9E%E7%9A%84%E5%88%97%E8%A1%A8%E4%B8%8D%E8%83%BD%E5%A2%9E%E5%8A%A0%E5%85%83%E7%B4%A0/</link><pubDate>Fri, 10 Apr 2020 17:49:32 +0000</pubDate><guid>https://tomial.github.io/posts/%E4%B8%BA%E4%BB%80%E4%B9%88arrays.aslist%E8%BF%94%E5%9B%9E%E7%9A%84%E5%88%97%E8%A1%A8%E4%B8%8D%E8%83%BD%E5%A2%9E%E5%8A%A0%E5%85%83%E7%B4%A0/</guid><description>1 2 3 String[] arr = {&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;}; List&amp;lt;String&amp;gt; list = Arrays.asList(arr); list.add(&amp;#34;C&amp;#34;); //java.lang.UnsupportedOperationException 如果调用Arrays.asList()方法返回列表的add方法会抛出异常，这是什么原因呢？ 在asList方法源码</description></item><item><title>JavaBean和Serializable,Mbeans</title><link>https://tomial.github.io/posts/javabean%E5%92%8Cserializable-mbeans/</link><pubDate>Mon, 25 Nov 2019 23:15:45 +0000</pubDate><guid>https://tomial.github.io/posts/javabean%E5%92%8Cserializable-mbeans/</guid><description>Java Bean JavaBean简单来说是一种约定俗成的标准。 所有的属性都是private的 有一个public的无参构造函数 实现了Serializabl</description></item><item><title>更高效的取余运算</title><link>https://tomial.github.io/posts/%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E5%8F%96%E4%BD%99%E8%BF%90%E7%AE%97/</link><pubDate>Mon, 12 Aug 2019 12:30:57 +0000</pubDate><guid>https://tomial.github.io/posts/%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E5%8F%96%E4%BD%99%E8%BF%90%E7%AE%97/</guid><description>平常的取余一般用%运算符，在学习ArrayDeque时发现其使用了另一种取余方法： elements[head = (head - 1) &amp;amp; (elements.length - 1)] = e; 其中head是该双向队列的头部下标，</description></item><item><title>为什么Java中数组是协变的而泛型不是?</title><link>https://tomial.github.io/posts/%E4%B8%BA%E4%BB%80%E4%B9%88java%E4%B8%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%8D%8F%E5%8F%98%E7%9A%84%E8%80%8C%E6%B3%9B%E5%9E%8B%E4%B8%8D%E6%98%AF/</link><pubDate>Sat, 10 Aug 2019 18:15:14 +0000</pubDate><guid>https://tomial.github.io/posts/%E4%B8%BA%E4%BB%80%E4%B9%88java%E4%B8%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%8D%8F%E5%8F%98%E7%9A%84%E8%80%8C%E6%B3%9B%E5%9E%8B%E4%B8%8D%E6%98%AF/</guid><description>什么是协变? Effective Java中写到： 1.数组和泛型有两个主要的不同点。第一个是数组是协变的(covariant)，而泛型是不变的(invarian</description></item><item><title>Java中的二进制</title><link>https://tomial.github.io/posts/java%E4%B8%AD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6/</link><pubDate>Wed, 15 May 2019 23:20:33 +0000</pubDate><guid>https://tomial.github.io/posts/java%E4%B8%AD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6/</guid><description>Java SE 7之后可以使用二进制来定义byte,short,int,long这些整型变量。要使用二进制来表示整形，需要在数字开头带上0b或者0B，如</description></item><item><title>Java8的Lambda表达式与类型检查、推断及限制</title><link>https://tomial.github.io/posts/java8%E7%9A%84lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E6%8E%A8%E6%96%AD%E5%8F%8A%E9%99%90%E5%88%B6/</link><pubDate>Tue, 23 Apr 2019 22:12:15 +0000</pubDate><guid>https://tomial.github.io/posts/java8%E7%9A%84lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E6%8E%A8%E6%96%AD%E5%8F%8A%E9%99%90%E5%88%B6/</guid><description>为了全面了解Lambda表达式，我们应该知道Lambda的实际类型是什么。 类型检查 Lambda的类型**是从使用Lambda的上下文推断出来</description></item><item><title>Iterable和Iterator</title><link>https://tomial.github.io/posts/iterable%E5%92%8Citerator/</link><pubDate>Tue, 09 Apr 2019 22:27:12 +0000</pubDate><guid>https://tomial.github.io/posts/iterable%E5%92%8Citerator/</guid><description>Iterator和Iterable的内部实现 iterator为Java中的迭代器对象，是能够对List这样的集合进行迭代遍历的底层依赖。而i</description></item><item><title>Java正则表达式匹配模式及实例</title><link>https://tomial.github.io/posts/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%AE%9E%E4%BE%8B/</link><pubDate>Tue, 09 Apr 2019 01:08:58 +0000</pubDate><guid>https://tomial.github.io/posts/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%AE%9E%E4%BE%8B/</guid><description>正则表达式 匹配 示例 x 单个字符 Java匹配Java . 任意单个字符 Java匹配J..a (ab|cd) ab或cd ten匹配t(en|im) [abc] a或b或c Java</description></item></channel></rss>